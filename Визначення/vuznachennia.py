# split() - розділяє строку на список підстрок по розділителю. sep - необов'язковий параметр, який дозволяє
# адати роздільник вручну. За умовчанням будь-який пробіл є розділителем.

# sorted() - повертає новий відсортований список ітерованого об'єкта (списка, словаря, кортежа). За умовчанням вона
# сортує його за віком. Сортування рядків здійснюється за ASCII-значеннями. Возвращаемое значение — Список (список).

# count() - кількість співпадінь. повертає кількість входжень підрядка sub у рядок str в діапазоні індексів [start, end] , якщо вони передані метод.

# sum() починає сумування елементів послідовності iterable з початковим значенням start , якщо воно вказано, розташування
# відбувається лише направо і в результаті повертає їх суму.

# index() - отримати індекс елементу. Приклад: my_tuple.index(2) Відпов дь: 1

# getattr() повертає значення атрибута вказаного об’єкта об’єкта за його іменем name . Имя атрибута name должно быть
# строкой. Якщо строка є іменем одного з атрибутів об’єкта об’єкта, результатом є значення цього атрибута.

# replace() - замінює значення.

        # УРОК5 tuple, namedtuple (кортеж, іменований кортеж)
    # ітерабельний обєкт незмынюваний (кортеж), змінюваний (іменований кортеж)
    # восновному використовується для збереження різних типів даних
    # namedtuple створюється за допомогою кортежу, списку, множини, словника
    # кортежі не змінюються але можна модифікувати елементи, якщо ці елементи змінюваного типу \17\
# отримання елемента кортежу за індексом
# отримання елемента іменованого кортежу за індексом, через точку .name, gettatr
# len()
# count()
# index() - отримання індексу елементу за значенням елементу.
# Приклад: my_tuple = (1, 2, 3, 4, 5) Дія: my_tuple.index(2) Відповідь: 1
# Або в межах: Дія: my_tuple.index(3, 1, 3) Відповідь: 2
# [] Отримати значення елементу за індексом: my_tuple = (1, 2, 3, 4, 5) Дія: my_tuple[2] Відповідь: 3
# in - перевірка чи входить елемент до кортежу
# head, *tail - head повертає перший елемент, *tail повертає все інше. Приклад: my_tuple = (1,5,6)
# Дія: print(head) print(*tail) Віповідь: 1 та 5, 6
# from collections import namedtuple - цей виклик надає змогу створити іменований кортеж
# replace() - змінює значення поля. Приклад: іменований_кортеж.replace(ключ=24)
# make() - функція. не зрозумів для чого


#######################################################################################################################


        # УРОК6 list (список) (mutable/змінний)
        # записується: [ , , , ,]
        # це  це тип даних, що є впорядкованою послідовністю певних значень, які можуть
        # повторюватися. Кількість елементів списку може бути довільною
        # може мати в собі різнотипні дані
# індексація [] Приклад: my_list[2]
# можна отримати зріз списку(slicing). Приклад my_list[::]
# in - перевірка, чи є елемент в списку. Приклад: my_list=[2,3,4,5] Дія: 4 in my_list Відповідь: True
# len()
# append() дозволяє додати до списку один новий елемент — наприклад, число, рядок або інший список.
# extend() - розпаковує і додає кожен елемент окремо. працює як append(), але в якості параметра приймається ітерований об’єкт: список,
# кортеж або рядок. Вміст цього об'єкта поелементно додається в інший список.

# remove() - видаляє елемент за значенням. Якщо такого елемента немає, буде помилка.
# Приклад: my_list = [1, 2, 3] | a.remove(2) | my_list = [1, 3]
# del - Видаляє елемент за індексом. Приклад del my_list[індекс]
# pop() - Якщо не вказаний індекс, видаляє останній елемент. Елемент що видаляється, можна покласти в змінну.
# Приклад: pop(індекс)/ my_list.pop(індекс)/ my_del = my_list.pop(індекс)

# insert() - вставити елемент у список. Приклад: my_list.insert(index, value)
# count() - підраховує, скільки разів елемент зустрічається в списку. Приклад: my_list=[2,3,5,4,5]
# Дія: my_list.count(5) Відповідь: 2
# index() - дозволяє отримати індекс першого елементу за значенням к=або за значенням в діапазоні.
# Приклад: my_list.index(value, lower_range_index, upper_range_index)
# copy() - копіювання списку. Приклад: my_list1 = my_list.copy()
# clear() - (метод) очистити список. Приклад: my_list.clear()

# join() - (метод)склеювання елементів списку в рядок. Приклад: str_list = ['a', 'b', 'c'] Дія:
# char_list = "; ".join(str_list) Відповідь: a; b; c

# sort() - (метод) сортування списку за зростанням. Змінює обєкт а не створює новий.
# sort(revers=True) - (метод) сортування списку за спаданням. Змінює обєкт.
# sorted() - (метод) сортування списку за зростанням. АЛЕ повертає новий обєкт!!!
# sorted(обєкт, reverse=True) - (метод) сортування списку за спаданням. АЛЕ повертає новий обєкт!!!
#  reverse() - (метод ) виведення списку в оберненному порядку. Змінює вихідний список. Приклад: my_list.reverse()

# Заміна елементу списку: my_list[index] = value


###Для виведення списку в оберненному порядку використовується метод reversed(), який повертає
#ітерований об’єкт, тому що побачити список треба залучити функцію list():
#print(list(reversed(my_list)))###


        # МАСИВ
        # (виклик) from array import *
        # записується як: array('i', [1, 2, 3, 4, 2, 6])
# array() - масив. Має в собі однотипні дані. Змінюваний. Набір фіксованої кількості однотипних елементів, розміщених у
# пам'яті безпосередньо один за одним, доступ до яких здійснюється за індексом (номером). my_array=[2,3,4,5]
# Дія: my_array[3] Відповідь: 5
# sum()
# append()
# isert()
# extend()
# fromlist() - (метод) додає до масиву елемент(и) зі списку до масиву.
# remove() - видаляє елемент за значенням.
# pop() - видаляє останній елемент з масиву.
# index() - отримати елемнт за індексом. Приклад: my_array.index(3)
# reverse() - зворотній масив.
# buffer_info() - Цей метод надає вам початкову адресу.
# count() - кількість входжень елементу.
# join() - склеює.
# tounicode() - Перетворити масив на рядок. my_array = array('u'['g', 'e', 'e','k'])| my_array.tounicode()| geek
# tolist() - Перетворити масив на список з тими самими елементами.

        # УРОК7 set (змінювана множина) - невпорядкована колекція хешованих обєктів, які не повторюються(видаляються дублікати)
        # Використовуються фігурні дужки{}. В якості елементів(ключів) можуть бути різні типи даних, тільки незмінювані: int, float, str, tuple.
        # set відсікає дублювання елементів. Приклад: my_set={1,2,2,3,3} по факту {1,2,3}
        # не можна шукати за індексом та робити зрізи: my_set[0]- помилка. Впорядковані не за індексом,
        # а за хешем(ключом). Обєкти не повторюються.
        # frozenset() незмінювана множина.

# add - додає обєкт. Аналог append(). Приклад: my_set = {1, 3} | my_set.add(5) | my_set = {1,3,5}
# update - додає декілька обєктів (розпаковує). Аналог extend() в списках. Приклад: my_set.update([1, 2], {4, 6})|my_set = {1,2,4,6}

# len()
# i in b

# discard() - виключає елемент з множини. Якщо такого елемента(ключа) немає в множині, то повертається таж сама множина.
# remove() - видаляє елемент з множини. Якщо такого елемента(ключа) немає в множині, то повертається ПОМИЛКА.
# clear() - очищення множини. Повертає "set()"

# | (вертикальна лінія) або a.union(b) - обєднує множини, відсікає дублюючі елементи.
# Приклад: а = {1, 2, 3, 4} b = {2, 5, 1, 7} Дія: a | b  або a.union()b = {1,2,3,4,5,7}
# & (амперсанд) - залишає тільки елементи,які співпадють, що є і в одній і в іншій множині.
# Приклад: а={1, 2} b={2, 3} Дія: a & b = {2}
# - (мінус) або a.differtnce(b) - залишає унікальні значення однієї з множин. Приклад: a = {1,2,3} b = {3,4,5}
# Дія: a - b або a.difference(b) = {1, 2}
# ^ (не знаю як називається) - обєдну тільи УНІКАЛЬНІ елементи з різних множин.
# Приклад: а={1,2,3,4,5} b={3,4,5,6} Дія: a^b = {1,2,6}


########################################################################################################################


        СЛОВНИК my_dict={ключ:значення}
        # dict() (словник) - один елемент складається з пари {ключ:значення}. Ключ має бути незмінюваним типом даних
        # int, float, str, tuple
# items() - дозволяє отримати доступ до пари ключ:значення в словнику. повертає об'єкт представлення словника,
# відповідний парам виду (ключ, значення).

# popitem() - видаляє довільну пару ключ-значення та повертає її. Якщо словник порожній, виникає виняток KeyError.
# update() - додає пари ключ:значення.
# zip() - розпаковка. Приклад: a = dict(zip([b, c, d], [1, 2, 3])) Відповідь: a = {b:1, c:2, d:3}

# keys() - показує ключі. Приклад: a=dict{b:1, c:2} a.keys() dict_keys([b, c])
# values() - показує значення. Приклад: a=dict}b:1, c:2} a.keys() dict_keys([1, 2])
# len() - довжина відображається у значення пари елементів ключ=пара
# def function(**kwargs) - не знаю що це таке.
# copy()
# clear()
# sorted()

# fromkeys() - (метод) створює новий словик.

# values()
# pop()
# popitem() - видаляє довільну пару ключ:значення і повертає її.

##################################################################################################################


                #УРОК8 функції
                # def назва_функції(параметр_не_обовязково):
# def - оператор, який пишеться перед оголошенням функції

